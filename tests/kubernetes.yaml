tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - grycap_custom_types: https://raw.githubusercontent.com/grycap/tosca/main/custom_types.yaml

description: Deploy a Kubernetes Virtual Cluster.

topology_template:
  inputs:
    fe_cpus:
      type: integer
      description: Number of CPUs for the front-end node
      default: 2
      required: yes
    fe_mem:
      type: scalar-unit.size
      description: Amount of Memory for the front-end node
      default: 4 GB
      required: yes
    fe_instance_type:
      type: string
      description: Flavor name of the front-end node
      default: ""
    fe_disk_size:
      type: scalar-unit.size
      description: Size of the disk to be attached to the FE instance (Set 0 if disk is not needed)
      default: 50 GB
    fe_volume_id:
      type: string
      description: "Or URL of the disk to be attached to the instance (format: ost://api.cloud.ifca.es/<vol_id>"
      default: ""
    fe_kube_nvidia_support:
      type: boolean
      description: Flag to add NVIDIA support in the FE (must be set if any WN has GPU)
      default: false

    wn_num:
      type: integer
      description: Number of WNs in the cluster
      default: 1
      required: yes
    wn_cpus:
      type: integer
      description: Number of CPUs for the WNs
      default: 2
      required: yes
    wn_mem:
      type: scalar-unit.size
      description: Amount of Memory for the WNs
      default: 4 GB
      required: yes
    wn_num_gpus:
      type: integer
      description: Number of GPUs to assing to this VM
      default: 0
    wn_gpu_vendor:
      type: string
      description: GPU Vendor
      default: ''
    wn_gpu_model:
      type: string
      description: GPU Model
      default: ''
    wn_instance_type:
      type: string
      description: Flavor name for the WNs
      default: ""
    wn_disk_size:
      type: scalar-unit.size
      description: Size of the root disk of the WNs (in case of 0 disk will no be resized)
      default: 20 GB
    wn_kube_nvidia_support:
      type: boolean
      description: Flag to add NVIDIA support in the WN
      default: false
      constraints:
        - valid_values: [ false, true ]

    kube_admin_token:
      type: string
      description: Access Token for the Kubernetes admin user
      default: not_very_secret_token
    kube_version:
      type: string
      description: Version of Kubernetes to install
      default: "1.29.5"
    kube_cri_runtime:
      type: string
      description: CRI Runtime to use with Kubernetes
      default: "docker"
    kube_cert_manager:
      type: boolean
      description: Flag to install Cert-Manager
      default: false
    kube_cert_user_email:
      type: string
      description: Email to be used in the Let's Encrypt issuer
      default: "jhondoe@server.com"
    kube_public_dns_name:
      type: string
      description: DNS name of the public interface of the FE node to generate the certificate
      default: ""

    kube_allowed_cidr:
      type: string
      description: Allowed remote CIDR to extenal access
      default: "0.0.0.0/0"

    kube_csi_driver:
      type: string
      description: Name of the CSI driver to install
      default: NFS

  node_templates:

    lrms_front_end:
      type: tosca.nodes.indigo.LRMS.FrontEnd.Kubernetes
      capabilities:
        endpoint:
          properties:
            ports:
              http_port:
                protocol: tcp
                source: 80
                remote_cidr: { get_input: kube_allowed_cidr }
              https_port:
                protocol: tcp
                source: 443
                remote_cidr: { get_input: kube_allowed_cidr }
      properties:
        admin_username: kubeuser
        install_nfs_client: true
        admin_token: { get_input: kube_admin_token }
        install_kubeapps: false
        version: { get_input: kube_version }
        nvidia_support: { get_input: fe_kube_nvidia_support }
        cert_manager: { get_input: kube_cert_manager }
        cert_user_email: { get_input: kube_cert_user_email }
        public_dns_name: { get_input: kube_public_dns_name}
        cri_runtime: { get_input: kube_cri_runtime }
        csi_driver: { get_input: kube_csi_driver }
      requirements:
        - host: front

    front:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            dns_name: kubeserver
            network_name: PUBLIC
        host:
          properties:
            disk_size: { get_input: wn_disk_size }
            num_cpus: { get_input: fe_cpus }
            mem_size: { get_input: fe_mem }
            instance_type: { get_input: fe_instance_type }
        os:
          properties:
            distribution: ubuntu
            type: linux
            version: 22.04
      requirements:
        - local_storage:
            node: fe_block_storage
            relationship:
              type: AttachesTo
              properties:
                location: /pv

    fe_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: fe_disk_size }
        volume_id: { get_input: fe_volume_id }

    wn_node:
      type: tosca.nodes.indigo.LRMS.WorkerNode.Kubernetes
      properties:
        front_end_ip: { get_attribute: [ front, private_address, 0 ] }
        version: { get_input: kube_version }
        nvidia_support: { get_input: wn_kube_nvidia_support }
        cri_runtime: { get_input: kube_cri_runtime }
        csi_driver: { get_input: kube_csi_driver }
      requirements:
        - host: wn

    wn:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count: { get_input: wn_num }
        host:
          properties:
            disk_size: { get_input: wn_disk_size }
            num_cpus: { get_input: wn_cpus }
            mem_size: { get_input: wn_mem }
            num_gpus: { get_input: wn_num_gpus }
            gpu_vendor: { get_input: wn_gpu_vendor }
            gpu_model: { get_input: wn_gpu_model }
            instance_type: { get_input: wn_instance_type }
        os:
          properties:
            distribution: ubuntu
            type: linux
            version: 22.04

  outputs:
    dashboard_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/dashboard/' ] }
    dashboard_dns_endpoint:
      value: { concat: [ 'https://', get_input: kube_public_dns_name, '/dashboard/' ] }
    api_endpoint:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], ':6443' ] }
    kubeconfig:
      value: { get_attribute: [ front, ansible_output, lrms_front_end_front_conf_front, tasks, kube_conf, output ] }
